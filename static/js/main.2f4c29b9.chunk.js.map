{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["validNum","split","IndexPage","state","from","to","inputVal","ouputVal","setPos","name","e","_this","setState","Object","defineProperty","target","value","inputChange","validRange","concat","toConsumableArray","slice","toLowerCase","includes","updateVal","_this$state","_inputVal$split","_inputVal$split2","slicedToArray","firstPart","lastPart","firstArr","firstLen","length","forEach","i","index","findIndex","j","Math","pow","Number","options","map","_","react_default","a","createElement","MenuItem_default","key","classes","root","select","p","v","Select_default","onChange","_this$state2","this","className","role","aria-label","TextField_default","toString","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_IndexPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f4c29b9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css'\n\nconst validNum = '0123456789abcdefghijklmnopqrstuvwxyz'.split('')\n\nexport default class IndexPage extends Component {\n  state = {\n    from: '10',\n    to: '10',\n    inputVal: '',\n    ouputVal: 0,\n  }\n\n  setPos = name => e => this.setState({ [name]: e.target.value })\n\n  inputChange = e => {\n    const validRange = [...validNum.slice(0, this.state.from), '.']\n    const inputVal = e.target.value.toLowerCase()\n    ;(inputVal === '' || validRange.includes(inputVal.slice(-1))) && this.setState({ inputVal }, this.updateVal)\n  }\n\n  updateVal = () => {\n    const { from, inputVal } = this.state\n    const [firstPart, lastPart] = inputVal.split('.')\n    let ouputVal = 0\n    if (firstPart) {\n      const firstArr = firstPart.split('')\n      let firstLen = firstArr.length\n      firstArr.forEach((i, index) => {\n        ouputVal += validNum.findIndex(j => j === i) * (from ** Number(firstLen - (index + 1)))\n      })\n    }\n    if (lastPart) {\n      lastPart.split('').forEach((i, index) => {\n        ouputVal += validNum.findIndex(j => j === i) * (from ** Number(- (index + 1)))\n      })\n    }\n    this.setState({ ouputVal })\n  }\n\n  options = () => validNum.map((_, i) => <MenuItem value={i + 1} key={i} classes={{ root: 'root-menu-item' }}>{i + 1}</MenuItem>)\n  select = (p, v) => <Select onChange={this.setPos(p)} value={v}>{this.options()}</Select>\n\n  render() {\n    const { from, to, inputVal, ouputVal } = this.state\n    return (\n      <div className=\"main\">\n        <div className=\"converter-comp gh-link\">\n          支持小数的在线进位制转换&nbsp;<span role=\"img\" aria-label=\"convert\">🌀</span>\n        </div>\n        <div className=\"converter-comp\">从&nbsp;&nbsp;&nbsp;{this.select('from', from)}&nbsp;&nbsp;&nbsp;进制</div>\n        <div className=\"converter-comp\">到&nbsp;&nbsp;&nbsp;{this.select('to', to)}&nbsp;&nbsp;&nbsp;进制</div>\n        <div className=\"converter-comp\">输入&nbsp;&nbsp;&nbsp;<TextField onChange={this.inputChange} value={inputVal} /></div>\n        <div className=\"converter-comp\">输出&nbsp;&nbsp;&nbsp;<TextField value={ouputVal.toString(Number(to))} disabled /></div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}