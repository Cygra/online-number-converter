{"version":3,"sources":["App.tsx","serviceWorker.js","index.js"],"names":["validNum","split","IndexPage","state","from","to","inputVal","ouputVal","componentDidUpdate","_","prevState","_this$state","_this","setState","updateVal","setPos","name","e","c","Object","objectSpread","defineProperty","target","value","inputChange","validRange","concat","toConsumableArray","slice","toLowerCase","includes","_this$state2","_inputVal$split","_inputVal$split2","slicedToArray","firstPart","lastPart","firstArr","firstLen","length","forEach","i","index","findIndex","j","Math","pow","options","map","react_default","a","createElement","MenuItem_default","key","classes","root","select","p","v","Select_default","onChange","_this$state3","this","className","role","aria-label","TextField_default","toString","Number","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_IndexPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3810464d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport './App.scss'\n\nconst validNum = '0123456789abcdefghijklmnopqrstuvwxyz'.split('')\n\ninterface IndexPageState {\n  from: number,\n  to: number,\n  inputVal: string,\n  ouputVal: number,\n}\n\nexport default class IndexPage extends Component<{}, IndexPageState> {\n  state = {\n    from: 10,\n    to: 10,\n    inputVal: '',\n    ouputVal: 0,\n  }\n\n  componentDidUpdate = (_: {}, prevState: IndexPageState): void => {\n    const { from, to } = this.state\n    prevState.from !== from && this.setState({ inputVal: '' }, this.updateVal)\n    prevState.to !== to && this.updateVal()\n  }\n\n  setPos = (name: 'from' | 'to'): ((e: React.ChangeEvent<HTMLSelectElement>) => void) => {\n    return (e: React.ChangeEvent<HTMLSelectElement>): void => {\n      this.setState(c => ({ ...c, [name]: e.target.value }))\n    }\n  }\n\n  inputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const validRange = [...validNum.slice(0, this.state.from), '.']\n    const inputVal = e.target.value.toLowerCase()\n    ;(inputVal === '' || validRange.includes(inputVal.slice(-1))) && this.setState({ inputVal }, this.updateVal)\n  }\n\n  updateVal = (): void => {\n    const { from, inputVal } = this.state\n    const [firstPart, lastPart] = inputVal.split('.')\n    let ouputVal = 0\n    if (firstPart) {\n      const firstArr = firstPart.split('')\n      let firstLen = firstArr.length\n      firstArr.forEach((i: string, index: number): void => {\n        ouputVal += validNum.findIndex(j => j === i) * (from ** (firstLen - (index + 1)))\n      })\n    }\n    if (lastPart) {\n      lastPart.split('').forEach((i: string, index: number): void => {\n        ouputVal += validNum.findIndex(j => j === i) * (from ** (- (index + 1)))\n      })\n    }\n    this.setState({ ouputVal })\n  }\n\n  options = (): JSX.Element[] => {\n    return validNum.map((_, i): JSX.Element => {\n      return (\n        <MenuItem value={i + 1} key={i} classes={{ root: 'root-menu-item' }}>\n          {i + 1}\n        </MenuItem>\n      )\n    })\n  }\n  select = (p: 'from' | 'to', v: number): JSX.Element => {\n    return (\n      <Select onChange={this.setPos(p)} value={v}>\n        {this.options()}\n      </Select>\n    )\n  }\n\n  render() {\n    const { from, to, inputVal, ouputVal } = this.state\n    return (\n      <div className=\"main\">\n        <div className=\"converter-comp gh-link\">\n          ÊîØÊåÅÂ∞èÊï∞ÁöÑÂú®Á∫øËøõ‰ΩçÂà∂ËΩ¨Êç¢&nbsp;<span role=\"img\" aria-label=\"convert\">üåÄ</span>\n        </div>\n        <div className=\"converter-comp\">‰ªé&nbsp;&nbsp;&nbsp;{this.select('from', from)}&nbsp;&nbsp;&nbsp;ËøõÂà∂</div>\n        <div className=\"converter-comp\">Âà∞&nbsp;&nbsp;&nbsp;{this.select('to', to)}&nbsp;&nbsp;&nbsp;ËøõÂà∂</div>\n        <div className=\"converter-comp\">ËæìÂÖ•&nbsp;&nbsp;&nbsp;<TextField onChange={this.inputChange} value={inputVal} /></div>\n        <div className=\"converter-comp\">ËæìÂá∫&nbsp;&nbsp;&nbsp;<TextField value={ouputVal === 0 ? '' : ouputVal.toString(Number(to))} disabled /></div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}