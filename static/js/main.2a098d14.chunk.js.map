{"version":3,"sources":["components/history/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["History","_ref","historyList","onHistoryItemPress","react_default","a","createElement","className","length","map","i","index","key","from","inputVal","to","IconButton_default","aria-label","onClick","color","Restore_default","fontSize","validNum","split","IndexPage","state","ouputVal","componentDidUpdate","_","prevState","_this$state","_this","setState","setPos","name","e","c","Object","objectSpread","defineProperty","target","value","inputChange","validRange","concat","toConsumableArray","slice","toLowerCase","includes","updateVal","_this$state2","_inputVal$split","_inputVal$split2","slicedToArray","firstPart","lastPart","firstArr","firstLen","forEach","findIndex","j","Math","pow","options","MenuItem_default","classes","root","select","p","v","Select_default","onChange","item","_this$state3","this","CompareArrows_default","TextField_default","Button_default","variant","toString","Number","disabled","components_history","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_IndexPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a098d14.chunk.js","sourcesContent":["import React, { SFC } from 'react'\nimport { HistoryItem } from '../../constants/interfaces'\nimport IconButton from '@material-ui/core/IconButton'\nimport Restore from '@material-ui/icons/Restore'\nimport './history.scss'\n\nconst History: SFC<{\n  historyList: HistoryItem[]\n  onHistoryItemPress: ((item: HistoryItem) => void)\n}> = ({\n  historyList,\n  onHistoryItemPress,\n}) => (\n  <div className=\"convert-history\">\n    {historyList.length > 0 && (<div>历史转换</div>)}\n    {historyList.map((i, index) => (\n      <div key={index} className=\"convert-history-item\">\n        <div>把&nbsp;{i.from}&nbsp;进制的&nbsp;{i.inputVal}&nbsp;转换为&nbsp;{i.to}&nbsp;进制</div>\n        <IconButton aria-label=\"Delete\" onClick={() => onHistoryItemPress(i)} color=\"primary\">\n          <Restore fontSize=\"large\" />\n        </IconButton>\n      </div>\n    ))}\n  </div>\n)\n\nexport default History\n","import React, { Component } from 'react'\nimport Select from '@material-ui/core/Select'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { HistoryItem } from './constants/interfaces'\nimport History from './components/history'\nimport CompareArrows from '@material-ui/icons/CompareArrows'\nimport './App.scss'\n\nconst validNum = '0123456789abcdefghijklmnopqrstuvwxyz'.split('')\n\ninterface IndexPageState {\n  from: number,\n  to: number,\n  inputVal: string,\n  ouputVal: number,\n  historyList: HistoryItem[]\n}\n\nexport default class IndexPage extends Component<{}, IndexPageState> {\n  state = {\n    from: 10,\n    to: 10,\n    inputVal: '',\n    ouputVal: 0,\n    historyList: [],\n  }\n\n  componentDidUpdate = (_: {}, prevState: IndexPageState): void => {\n    const { from, to } = this.state\n    prevState.from !== from && this.setState({ inputVal: '', ouputVal: 0 })\n    prevState.to !== to && this.setState({ ouputVal: 0 })\n  }\n\n  setPos = (name: 'from' | 'to'): ((e: React.ChangeEvent<HTMLSelectElement>) => void) => {\n    return (e: React.ChangeEvent<HTMLSelectElement>): void => {\n      this.setState(c => ({ ...c, [name]: e.target.value }))\n    }\n  }\n\n  inputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const validRange = [...validNum.slice(0, this.state.from), '.']\n    const inputVal = e.target.value.toLowerCase()\n    ;(inputVal === '' || validRange.includes(inputVal.slice(-1))) && this.setState({ inputVal })\n  }\n\n  updateVal = (): void => {\n    const { from, inputVal, historyList, to } = this.state\n    const [firstPart, lastPart] = inputVal.split('.')\n    let ouputVal = 0\n    if (firstPart) {\n      const firstArr = firstPart.split('')\n      let firstLen = firstArr.length\n      firstArr.forEach((i: string, index: number): void => {\n        ouputVal += validNum.findIndex(j => j === i) * (from ** (firstLen - (index + 1)))\n      })\n    }\n    if (lastPart) {\n      lastPart.split('').forEach((i: string, index: number): void => {\n        ouputVal += validNum.findIndex(j => j === i) * (from ** (- (index + 1)))\n      })\n    }\n\n    this.setState({ ouputVal, historyList: [ ...historyList, { from, to, inputVal }] })\n  }\n\n  options = (): JSX.Element[] => {\n    return validNum.map((_, i): JSX.Element => {\n      return (\n        <MenuItem value={i + 1} key={i} classes={{ root: 'root-menu-item' }}>\n          {i + 1}\n        </MenuItem>\n      )\n    })\n  }\n\n  select = (p: 'from' | 'to', v: number): JSX.Element => {\n    return (\n      <Select onChange={this.setPos(p)} value={v}>\n        {this.options()}\n      </Select>\n    )\n  }\n\n  onHistoryItemPress = (item: HistoryItem): void => {\n    this.setState({ ...item, ouputVal: 0 }, this.updateVal)\n  }\n\n  render() {\n    const { from, to, inputVal, ouputVal, historyList } = this.state\n    return (\n      <div className=\"main\">\n        <div className=\"converter-container\">\n          <div className=\"converter-comp converter-title\">\n            支持小数的在线进位制转换&nbsp;\n            <CompareArrows fontSize=\"large\" color=\"primary\" />\n          </div>\n          <div className=\"converter-comp\">从&nbsp;&nbsp;&nbsp;{this.select('from', from)}&nbsp;&nbsp;&nbsp;进制</div>\n          <div className=\"converter-comp\">到&nbsp;&nbsp;&nbsp;{this.select('to', to)}&nbsp;&nbsp;&nbsp;进制</div>\n          <div className=\"converter-comp\">输入&nbsp;&nbsp;&nbsp;<TextField onChange={this.inputChange} value={inputVal} /></div>\n          <div className=\"converter-comp\"><Button variant=\"contained\" onClick={this.updateVal} color=\"primary\">转换</Button></div>\n          <div className=\"converter-comp\">输出&nbsp;&nbsp;&nbsp;<TextField value={ouputVal === 0 ? '' : ouputVal.toString(Number(to))} disabled /></div>\n        </div>\n\n        <History historyList={historyList} onHistoryItemPress={this.onHistoryItemPress} />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}